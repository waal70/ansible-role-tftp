---
# tasks file to install tftpd-hpa
# tftpd-hpa is the Trivial FTP server for Debian. It creates a default
# config and directory structure, which is fine for this purpose
- name: Ensure tftpd-hpa is installed
  ansible.builtin.apt:
    name: tftpd-hpa
    state: present

- name: Check whether there already is a netboot image present
  ansible.builtin.stat:
    path: /srv/tftp/version.info
  register: version_stat_result

- name: Should there be no version.info, create one that is really old to trigger refresh
  ansible.builtin.file:
    path: /srv/tftp/version.info
    state: touch
    mode: "0777"
    modification_time: '200212311815.00'
  when: not version_stat_result.stat.exists

- name: Re-read the stat for the version.info, which now always exists
  ansible.builtin.stat:
    path: /srv/tftp/version.info
  register: version_stat_result

- name: Register the version.info's mtime into a properly formatted variable
  ansible.builtin.set_fact:
    version_mtime: "{{ ('%Y%m%d-%H%M%S' | strftime(version_stat_result.stat.mtime)) }}"

- name: Determine the age of the netboot image
  ansible.builtin.find:
    paths: /srv/tftp
    pattern: 'version.info'
    age: "{{ netboot_max_age }}"
    age_stamp: mtime
  register: netboot_age

- name: Explain to the user what we found when looking at netboot image age
  ansible.builtin.debug:
    msg:
      - "Netboot is {{ (now() - (version_mtime | to_datetime('%Y%m%d-%H%M%S'))).days }} days old"
      - "Maximum allowed age is {{ netboot_max_age }}"

- name: Block to install or refresh netboot image files
  when: netboot_age.files | length > 0
  block:
    - name: Obtain and unarchive the current netboot image. Configure netboot_url in vars or defaults
      ansible.builtin.unarchive:
        src: "{{ netboot_url }}"
        remote_src: true
        dest: /srv/tftp/

    - name: Obtain the current non-free firmware image. Configure firmware_url in vars or defaults
      ansible.builtin.get_url:
        url: "{{ firmware_url }}"
        dest: /srv/tftp/debian-installer/amd64/
        force: true
        mode: "0644"

    - name: GUnzip the firmware file
      ansible.builtin.command: >
        gunzip -f /srv/tftp/debian-installer/amd64/firmware.cpio.gz
      args:
        creates: /srv/tftp/debian-installer/amd64/firmware.cpio
      become: true
      become_user: root

    - name: Unpack the firmware cpio, filtering only realtek packages
      ansible.builtin.command: >
        bash -c 'cd /srv/tftp/debian-installer/amd64/ && cpio -idv *realtek* < firmware.cpio'
      args:
        chdir: /srv/tftp/debian-installer/amd64/
        creates: /srv/tftp/debian-installer/amd64/firmware
      become: true
      become_user: root

    - name: Unpack the contents-firmware file, unknown if needed
      ansible.builtin.command: >
        bash -c 'cd /srv/tftp/debian-installer/amd64/ && cpio -idv *ontents* < firmware.cpio'
      args:
        chdir: /srv/tftp/debian-installer/amd64/
        creates: /srv/tftp/debian-installer/amd64/firmware/Contents-firmware
      become: true
      become_user: root

    - name: Remove the firmware.cpio file, as we will overwrite it
      ansible.builtin.file:
        path: /srv/tftp/debian-installer/amd64/firmware.cpio
        state: absent
      become: true
      become_user: root

    - name: Repack the firmware files into a new firware.cpio.gz
      ansible.builtin.command: >
        bash -c 'cd /srv/tftp/debian-installer/amd64/ && find ./firmware | cpio -ov -H newc | gzip -c > firmware.cpio.gz'
      args:
        chdir: /srv/tftp/debian-installer/amd64/
        creates: /srv/tftp/debian-installer/amd64/firmware.cpio.gz
      become: true
      become_user: root

    - name: Update the initrd.gz with the new firmware.cpio.gz
      ansible.builtin.command: >
        bash -c 'cd /srv/tftp/debian-installer/amd64/ && cat initrd.gz firmware.cpio.gz > initrd.gz.new'
      args:
        chdir: /srv/tftp/debian-installer/amd64/
        creates: /srv/tftp/debian-installer/amd64/initrd.gz.new
      become: true
      become_user: root

    - name: Remove the old initrd.gz
      ansible.builtin.file:
        path: /srv/tftp/debian-installer/amd64/initrd.gz
        state: absent
      become: true
      become_user: root

    - name: Move the new initrd.gz into place
      ansible.builtin.command: >
        mv /srv/tftp/debian-installer/amd64/initrd.gz.new /srv/tftp/debian-installer/amd64/initrd.gz
      args:
        creates: /srv/tftp/debian-installer/amd64/initrd.gz
      become: true
      become_user: root

    # These with_items come from the netboot tarball and cannot be configured - leave them as-is
    - name: Place the specific config files into the correct folder
      ansible.builtin.template:
        src: "{{ item.src }}"
        dest: "{{ item.dst }}"
        mode: "0644"
      with_items:
        - src: srv/tftp/debian-installer/amd64/boot-screens/syslinux.cfg.j2
          dst: /srv/tftp/debian-installer/amd64/boot-screens/syslinux.cfg
        - src: srv/tftp/debian-installer/amd64/boot-screens/txt.cfg.j2
          dst: /srv/tftp/debian-installer/amd64/boot-screens/txt.cfg
